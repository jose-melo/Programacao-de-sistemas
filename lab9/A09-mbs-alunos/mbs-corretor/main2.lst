; -------------------------------------------------------------------
; Programa principal do Monitor Batch Simples (MBS)
; -------------------------------------------------------------------

; Coloque aqui os símbolos importados
; -------------------------------------------------------------------

4000 0000 ; "DUMPER<"		;	DUMPER     <
4001 0000 ; "DUMP_INI<"		;	DUMP_INI   <
4002 0000 ; "DUMP_TAM<"		;	DUMP_TAM   <
4003 0000 ; "DUMP_UL<"		;	DUMP_UL    <
4004 0000 ; "DUMP_BL<"		;	DUMP_BL    <
4005 0000 ; "DUMP_EXE<"		;	DUMP_EXE   <
4006 0000 ; "LOADER<"		;	LOADER     <
4007 0000 ; "LOADER_UL<"		;	LOADER_UL  <

; Origem relocável
				;	                &       /0000

a000 00d2		;	MAIN            JP      INI      ; salta para o início do programa
8002 0000		;	UL              K       /0000    ; parâmetro: UL onde está o arquivo de batch
8004 d000		;	GET             K       /D000
8006 0300		;	DISCO           K       /0300
; -------------------------------------------------------------------
; Subrotina: UNPACK
; Extrai os bytes de uma word contida no acumulador, colocando-os
; em dois endereços da memória.
;
; Exemplo: dada a word XYZT no acumulador, ao final da execução,
; UNP_B1="00XY" e UNP_B2="00ZT".
; -------------------------------------------------------------------

; Parâmetros
8008 0000		;	WORD            $       /0001       ; Word de entrada   0
				;	WORD            $       /0001       ; Word de entrada
800a 0000		;	UNP_B1          $       /0001       ; Byte mais significativo   0
				;	UNP_B1          $       /0001       ; Byte mais significativo
800c 0000		;	UNP_B2          $       /0001       ; Byte menos significativo   0
				;	UNP_B2          $       /0001       ; Byte menos significativo

; Constantes
800e 0100		;	SHIFT           K       /0100
8010 0030		;	CH_0            K       /0030
8012 0046		;	CH_F            K       /0046
8014 003a		;	X_INI           K       /003A
8016 0041		;	X_END           K       /0041
8018 0007		;	X_DIFF          K       /0007
801a 0001		;	ONE             K       /0001
801c ffff		;	MINUS_1         K       /FFFF
801e 0000		;	ZERO            K       /0000
8020 1000		;	EIGHT           K       /1000
8022 0100		;	FOUR            K       /0100
8024 0010		;	TWO             K       /0010

; Corpo da subrotina
8026 0000		;	UNPACK          $       /0001   0
				;	UNPACK          $       /0001
a028 9008		;	                MM      WORD        ; Carrega word. Primeiramente faremos unpack de B2
a02a 600e		;	                *       SHIFT       ; Desloca os bytes para remover 2 primeiros hex
a02c a03c		;	                SC      RSHIFT2     ; Desloca os bytes menos significativos pro seu lugar
a02e 900c		;	                MM      UNP_B2      ; Salva resultado
a030 8008		;	                LD      WORD        ;
a032 a03c		;	                SC      RSHIFT2     ;
a034 900a		;	                MM      UNP_B1      ;
a036 b026		;	                RS      UNPACK      ; Retorna

; -------------------------------------------------------------------
; Subrotina: RSHIFT2
; Faz um right shift (<) duas vezes do valor do acumulador
; -------------------------------------------------------------------

; Constantes
8038 8000		;	FIX             K       /8000
803a 0080		;	REFIX           K       /0080
; Corpo da subrotina
803c 0000		;	RSHIFT2         $       /0001   0
				;	RSHIFT2         $       /0001
a03e 2044		;	                JN      NEG         ; O número é negativo
a040 700e		;	                /       SHIFT       ; Retorna os 2 bytes à posição inicial
a042 004a		;	                JP      FIM-RS      ; Vai para final de RSHIFT2
a044 5038		;	NEG             -       FIX         ; Fix do shift em número negativo
a046 700e		;	                /       SHIFT       ; Shift
a048 403a		;	                +       REFIX       ; Fix para voltar número tirado
a04a b03c		;	FIM-RS          RS      RSHIFT2     ; Retorno

; -------------------------------------------------------------------
; Subrotina: IS_HEX
; -------------------------------------------------------------------

  ;; Parâmetros
804c 0000		;	S_HEX           $       /0001   0
				;	S_HEX           $       /0001
  ;; Corpo da subrotina
804e 0000		;	IS_HEX          $       /0001   0
				;	IS_HEX          $       /0001
a050 904c		;	                MM      S_HEX
  ;; Verifica se < '0'
a052 5010		;	                -       CH_0
a054 205e		;	                JN      NOT_HEX
  ;; Verifica se > 'f'
a056 804c		;	                LD      S_HEX
a058 5012		;	                -       CH_F
a05a 501a		;	                -       ONE ; we wanna include 'f'
a05c 2062		;	                JN      MIGHTB
  ;; Não é hex. Retorna -1.
a05e 801c		;	NOT_HEX         LD      MINUS_1
a060 b04e		;	                RS      IS_HEX
  ;; Incrementa CH_F decrementado e verifica se é caractere especial.
a062 804c		;	MIGHTB          LD      S_HEX
a064 5014		;	                -       X_INI
a066 2072		;	                JN      YES_HEX
a068 5018		;	                -       X_DIFF
a06a 205e		;	                JN      NOT_HEX
a06c 804c		;	                LD      S_HEX
a06e 5018		;	                -       X_DIFF
a070 b04e		;	                RS      IS_HEX
a072 804c		;	YES_HEX         LD      S_HEX
a074 b04e		;	                RS      IS_HEX

; -------------------------------------------------------------------
; Subrotina: CHTOI
; Converte uma word em hexa para um número inteiro.
;
; Exemplo: CHTOI("0010") = 0010 (i.e., 16 em decimal)
; -------------------------------------------------------------------

  ;; Parâmetros
8076 0000		;	CH_ANS          $       /0001        ; Variável para guardar resultado   0
				;	CH_ANS          $       /0001        ; Variável para guardar resultado
8078 0000		;	CH_IN_A         $       /0001        ; 2 bytes mais significativos (em ASCII)   0
				;	CH_IN_A         $       /0001        ; 2 bytes mais significativos (em ASCII)
807a 0000		;	CH_IN_B         $       /0001        ; 2 bytes menos signicativos (em ASCII)   0
				;	CH_IN_B         $       /0001        ; 2 bytes menos signicativos (em ASCII)

  ;; Corpo da subrotina
807c 0000		;	CHTOI           $       /0001   0
				;	CHTOI           $       /0001
  ;; Zera CH_ANS
a07e 801e		;	                LD      ZERO
a080 9076		;	                MM      CH_ANS
  ;; Unpack primeira palavra
a082 8078		;	                LD      CH_IN_A
a084 9008		;	                MM      WORD
a086 a026		;	                SC      UNPACK
  ;; Processa primeira palavra
  ;; Processa primeiro byte
a088 800a		;	                LD      UNP_B1
a08a a04e		;	                SC      IS_HEX
a08c 20c2		;	                JN      CH_RET
a08e 5010		;	                -       CH_0
a090 6020		;	                *       EIGHT
a092 9076		;	                MM      CH_ANS
  ;; Processa segundo byte
a094 800c		;	                LD      UNP_B2
a096 a04e		;	                SC      IS_HEX
a098 20c2		;	                JN      CH_RET
a09a 5010		;	                -       CH_0
a09c 6022		;	                *       FOUR
a09e 4076		;	                +       CH_ANS
a0a0 9076		;	                MM      CH_ANS
  ;; Unpack segunda palavra
a0a2 807a		;	                LD      CH_IN_B
a0a4 9008		;	                MM      WORD
a0a6 a026		;	                SC      UNPACK
  ;; Processa segunda palavra
  ;; Processa primeiro byte
a0a8 800a		;	                LD      UNP_B1
a0aa a04e		;	                SC      IS_HEX
a0ac 20c2		;	                JN      CH_RET
a0ae 5010		;	                -       CH_0
a0b0 6024		;	                *       TWO
a0b2 4076		;	                +       CH_ANS
a0b4 9076		;	                MM      CH_ANS
  ;; Processa segundo byte
a0b6 800c		;	                LD      UNP_B2
a0b8 a04e		;	                SC      IS_HEX
a0ba 20c2		;	                JN      CH_RET
a0bc 5010		;	                -       CH_0
a0be 4076		;	                +       CH_ANS
  ;; Valor da resposta está no acumulador!
a0c0 9076		;	                MM      CH_ANS
a0c2 b07c		;	CH_RET          RS      CHTOI
;==========================================
;Variáveis e constantes
;==========================================
80c4 4c4f		;	LO              K /4C4F ; LO em ASCII
80c6 4455		;	DU              K /4455 ; DU em ASCII
80c8 2f2a		;	TKFIM           K /2F2A ; /* em ASCII
80ca 0aff		;	EOF             K /0AFF ; END OF FILE
80cc 2f2f		;	BARRAS2         K /2F2F ; // em ASCII
80ce 4a42		;	TKJOB           K /4A42 ; JB em ASCII
;
80d0 0000		;	                K       /0000
a0d2 a1c4		;	INI             SC PEGADADO
a0d4 a134		;	                SC CHECABARRA
a0d6 210a		;	                JN ERROJOB
a0d8 a142		;	                SC CHECAJOB
a0da 210a		;	                JN ERROJOB
a0dc a1c4		;	LOOP            SC PEGADADO         ;Le os pula-linhas
a0de a1c4		;					SC PEGADADO                
a0e0 50c8		;	                -  TKFIM
a0e2 1132		;	                JZ FIM
a0e4 40c8		;	                +  TKFIM
a0e6 50ca		;	                -  EOF
a0e8 1128		;	                JZ ERROEND
a0ea 40ca		;	                +  EOF
a0ec a134		;	                SC CHECABARRA
a0ee 2114		;	                JN ERROCMD
a0f0 a1c4		;	                SC PEGADADO
a0f2 50c4		;	                -  LO
a0f4 10fe		;	                JZ OPLOAD
a0f6 40c4		;	                + LO
a0f8 50c6		;	                - DU
a0fa 1104		;	                JZ OPDUMP
a0fc 0114		;	                JP ERROCMD
a0fe a1ae		;	OPLOAD          SC TRATALOAD
a100 211e		;	                JN ERROARG
a102 00dc		;	                JP LOOP
a104 a152		;	OPDUMP          SC TRATADUMP
a106 211e		;	                JN ERROARG
a108 00dc		;	                JP LOOP
810a 3001		;	ERROJOB         LV /0001
810c f0ee		;	                OS /0EE
810e 304a		;	                LV /004A ; J
8110 e100		;	                PD /100
a112 0132		;	                JP FIM
8114 3002		;	ERROCMD         LV /0002
8116 f0ee		;	                OS /0EE
8118 3043		;	                LV /0043 ; C
811a e100		;	                PD /100
a11c 0132		;	                JP FIM
811e 3003		;	ERROARG         LV /0003
8120 f0ee		;	                OS /0EE
8122 3041		;	                LV /0041 ; A
8124 e100		;	                PD /100
a126 0132		;	                JP FIM
8128 3004		;	ERROEND         LV /0004
812a f0ee		;	                OS /0EE
812c 3044		;	                LV /0044 ; D
812e e100		;	                PD /100
a130 0132		;	                JP FIM
a132 c132		;	FIM             HM      FIM   ; Fim do programa
;
;ChecaBarra
;
8134 0000		;	CHECABARRA      K  /0000
a136 50cc		;	                -  BARRAS2
a138 113e		;	                JZ OKBARRA
813a 3fff		;	                LV /FFF
a13c 0140		;	                JP FIMBARRA
813e 3000		;	OKBARRA         LV /0000
a140 b134		;	FIMBARRA             RS CHECABARRA
;
;CHECAJOB
;
8142 0000		;	CHECAJOB        K /0000
a144 a1c4		;	                SC PEGADADO
a146 50ce		;	                -  TKJOB
a148 114e		;	                JZ CERTOJOB
814a 3fff		;	                LV /FFF
a14c 0150		;	                JP FIMJOB
814e 3000		;	CERTOJOB        LV /0
a150 b142		;	FIMJOB          RS CHECAJOB
;
;TRATADUMP
;
8152 0000		;	TRATADUMP       K /0000
a154 a1c4		;	                SC PEGADADO ; Le o pula linha
a156 a1c4		;	                SC PEGADADO
a158 9078		;	                MM CH_IN_A
a15a a1c4		;	                SC PEGADADO
a15c 907a		;	                MM CH_IN_B
a15e a07c		;	                SC CHTOI
a160 8076		;	                LD CH_ANS
d162 9004		;	                MM DUMP_BL ; Tamanho do bloco
a164 a1c4		;	                SC PEGADADO
a166 a1c4		;	                SC PEGADADO
a168 9078		;	                MM CH_IN_A
a16a a1c4		;	                SC PEGADADO
a16c 907a		;	                MM CH_IN_B
a16e a07c		;	                SC CHTOI
a170 8076		;	                LD CH_ANS
d172 9001		;	                MM DUMP_INI ; End. inicial
a174 a1c4		;	                SC PEGADADO
a176 a1c4		;	                SC PEGADADO
a178 9078		;	                MM CH_IN_A
a17a a1c4		;	                SC PEGADADO
a17c 907a		;	                MM CH_IN_B
a17e a07c		;	                SC CHTOI
a180 8076		;	                LD CH_ANS
d182 9002		;	                MM DUMP_TAM ; Tamanho total
a184 a1c4		;	                SC PEGADADO
a186 a1c4		;	                SC PEGADADO
a188 9078		;	                MM CH_IN_A
a18a a1c4		;	                SC PEGADADO
a18c 907a		;	                MM CH_IN_B
a18e a07c		;	                SC CHTOI
a190 8076		;	                LD CH_ANS
d192 9005		;	                MM DUMP_EXE ; End. da 1 inst
a194 a1c4		;					SC PEGADADO
a196 a1c4		;	                SC PEGADADO
a198 9078		;	                MM CH_IN_A
a19a a1c4		;	                SC PEGADADO
a19c 907a		;	                MM CH_IN_B
a19e a07c		;	                SC CHTOI
a1a0 8076		;	                LD CH_ANS
d1a2 9003		;					MM DUMP_UL ; Unidade lógica
d1a4 a000		;	                SC DUMPER
81a6 3000		;	                LV /0000
a1a8 01ac		;	                JP FIMOPDUMP
81aa 3fff		;	ERRO            LV /FFF
a1ac b152		;	FIMOPDUMP       RS TRATADUMP
;
;TRATALOAD
;
81ae 0000		;	TRATALOAD       K /0000
a1b0 a1c4		;	                SC PEGADADO
a1b2 a1c4		;	                SC PEGADADO
a1b4 9078		;	                MM CH_IN_A
a1b6 a1c4		;	                SC PEGADADO
a1b8 907a		;	                MM CH_IN_B
a1ba a07c		;	                SC CHTOI
a1bc 8076		;	                LD CH_ANS
d1be 9007		;	                MM LOADER_UL
d1c0 a006		;	                SC LOADER
a1c2 b1ae		;	                RS TRATALOAD
;
;
;
81c4 0000		;	PEGADADO        K /0000
a1c6 8004		;	                LD GET
a1c8 4002		;	                +  UL
a1ca 4006		;	                + DISCO
a1cc 91ce		;	                MM INST1
81ce 0000		;	INST1           K /0000
a1d0 b1c4		;	                RS PEGADADO
